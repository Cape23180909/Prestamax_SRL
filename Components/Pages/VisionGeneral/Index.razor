@page "/VisionGeneral/Index"
@inject ClienteService clienteService
@inject PrestamoService prestamoService
@inject CobroService cobroService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Visión General</PageTitle>

<div class="container-fluid vh-100 d-flex flex-column justify-content-center">
    <div class="card shadow-lg w-100 h-100">
        <div class="card-header d-flex justify-content-between text-black rounded-top">
            <div class="d-flex align-items-center">
                <!-- Botón Volver -->
                <button @onclick="Volver" class="btn btn-outline-danger mt-1">
                    <span class="bi bi-arrow-left"></span> Volver
                </button>
            </div>
            <h3 class="card-title text-center w-100">Visi&oacute;n General</h3>
        </div>

        @* Filtro de Préstamos *@
        <div class="mb-4">
            <label for="filtroEstado" class="form-label"><strong>Filtrar por:</strong></label>
            <select id="filtroEstado" @bind="filtroEstado" class="form-select" style="width: 500px">
                <option value="">Todos</option>
                <option value="Activo">Activo</option>
                <option value="Finalizado">Finalizado</option>
                <option value="Mora">En Mora</option>
            </select>
        </div>

        @* Tabla de Préstamos *@
        @if (listaPrestamosFiltrados?.Any() == true)
        {
            <table class="table table-bordered table-striped text-center">
                <thead class="table-primary">
                    <tr>
                        <th>Préstamo ID</th>
                        <th>Cedula</th>
                        <th>Nombres</th>
                        <th>Apellidos</th>
                        <th>Estado</th>
                        <th>Fecha Préstamo</th>
                        <th>Forma de Pago</th>
                        <th>Fecha Pago</th>
                        <th>Monto Prestado</th>
                        <th>Interes</th>
                        <th>Cuotas</th>
                        <th>Monto Cuota</th>
                        <th>Total Interes</th>
                        <th>Saldo Pendiente</th>
                        <th>Total a Pagar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prestamo in listaPrestamosFiltrados)
                    {
                        <tr style="@GetRowStyle(prestamo)">
                            <td>@prestamo.PrestamosId</td>
                            <td>@prestamo.Cliente.Cedula</td>
                            <td>@prestamo.Cliente.Nombres</td>
                            <td>@prestamo.Cliente.Apellidos</td>
                            <td>@prestamo.Estado</td>
                            <td>@(prestamo.Fecha?.ToString("dd/MM/yyyy") ?? "N/A")</td>
                            <td>@prestamo.FormaPago</td>
                            <td>@(prestamo.FechaInicio?.ToString("dd/MM/yyyy") ?? "N/A")</td>
                            <td>@prestamo.MontoPrestado.ToString("C")</td>
                            <td>@prestamo.Interes</td>
                            <td>@prestamo.Cuotas</td>
                            <td>@prestamo.MontoCuota</td>
                            <td>@prestamo.TotalInteres</td>
                            <td>@(prestamo.Saldo?.ToString("C") ?? "N/A")</td>
                            <td>@(prestamo.MontoTotalPagar?.ToString("C") ?? "N/A")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-warning text-center" role="alert">
                No se encontraron préstamos para este cliente con los filtros aplicados.
            </div>
        }
    </div>

    <div class="card-footer d-flex justify-content-between bg-light">
        <p class="mb-0">Total de préstamos: @listaPrestamosFiltrados?.Count</p>
    </div>
</div>

@code {
    [Parameter]
    public int HistorialId { get; set; }
    public Clientes cliente { get; set; }
    public List<Prestamos> listaPrestamos { get; set; } = new();
    public List<Cobros> listaCobros { get; set; } = new();
    public List<Prestamos> listaPrestamosFiltrados => listaPrestamos
      .Where(p => string.IsNullOrEmpty(filtroEstado) || p.Estado.Equals(filtroEstado, StringComparison.OrdinalIgnoreCase))
      .ToList();
    public string filtroEstado { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        cliente = await clienteService.ObtenerClientePorId(HistorialId);
        listaCobros = await cobroService.Listar(c => c.Prestamo.ClienteId == HistorialId);
        listaPrestamos = await prestamoService.ListarPrestamosConClientes();
        // Cambiar estado a "Finalizado" si el saldo es 0
        foreach (var prestamo in listaPrestamos)
        {
            if (prestamo.Saldo == 0)
            {
                prestamo.Estado = "Finalizado";
            }
        }

        StateHasChanged();
    }

    private string GetRowStyle(Prestamos prestamo)
    {
        return prestamo.Estado switch
        {
            "Finalizado" => "background-color:  #28a745;", // Verde claro para "Finalizado"
            "Mora" => "background-color: #f8d7da;", // Rojo claro para "Mora"
            "Activo" => "background-color: #ff4c4c; color: white;", // Rojo encendido para "Activo"
            _ => ""
        };
    }

    private async Task Volver()
    {
        navigationManager.NavigateTo("/menu"); // Cambia la ruta según sea necesario.
    }
}
