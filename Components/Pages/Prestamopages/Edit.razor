@page "/Prestamo/Edit/{prestamoId:int}"
@inject ClienteService clienteService
@inject PrestamoService prestamoService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<PageTitle>Editar Préstamo</PageTitle>

<EditForm Model="prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container-fluid vh-95 d-flex justify-content-center align-items-center">
        <div class="card shadow-lg" style="width: 1400px; min-height: 600px; border-radius: 15px;">
            @* Encabezado y botón Buscar Cliente *@
            <div class="card-header" style="display: flex; justify-content: space-between; align-items: center; background-color: #f1f1f1;">
                <div style="flex: 1; text-align: center;">
                    <h3 class="card-title">Editar Préstamo</h3>
                </div>
                <button type="button" class="btn btn-primary" style="border-radius: 5px;" @onclick="RedirigirABusquedaCliente">
                    <span class="bi bi-person-fill-check"></span> Buscar Cliente
                </button>
            </div>

            <div class="card-body" style="background-color: #f9f9f9;">
                @* Información del Cliente Seleccionado *@
                <div class="mb-4">
                    <h5 class="text-primary">Información del Cliente Seleccionado</h5>
                    @if (cliente != null)
                    {
                        <div class="card mb-3" style="border-radius: 10px; background-color: #e7f0ff;">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label><strong>Nombre:</strong></label>
                                        <span>@cliente.Nombres @cliente.Apellidos</span>
                                    </div>
                                    <div class="col-md-6">
                                        <label><strong>Cédula:</strong></label>
                                        <span>@cliente.Cedula</span>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label><strong>Dirección:</strong></label>
                                        <span>@cliente.Direccion</span>
                                    </div>
                                    <div class="col-md-6">
                                        <label><strong>Teléfono:</strong></label>
                                        <span>@cliente.Telefono</span>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label><strong>Ciudad:</strong></label>
                                        <span>@cliente.Ciudad</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <strong>Nota:</strong> Selecciona un cliente para asociarlo al préstamo.
                        </div>
                    }
                </div>

                @* Detalles del Préstamo *@
                <h5 class="text-primary">Detalles del Préstamo</h5>

                <div class="mb-3">
                    <label for="fecha" class="form-label"><strong>Fecha Pr&eacute;stamo:</strong></label>
                    <InputDate id="fecha" class="form-control" @bind-Value="prestamo.Fecha" />
                    <ValidationMessage For="@(() => prestamo.Fecha)" />
                </div>

                <div class="mb-3">
                    <label for="montoPrestado" class="form-label"<strong>Monto Pr&eacute;stamo:</strong></label>
                    <InputNumber id="montoPrestado" class="form-control" @bind-Value="prestamo.MontoPrestado" />
                    <ValidationMessage For="@(() => prestamo.MontoPrestado)" />
                </div>

                <div class="mb-3">
                    <label for="interes" class="form-label"<strong>Interés (%):</strong></label>
                    <InputNumber id="interes" class="form-control" @bind-Value="prestamo.Interes" />
                    <ValidationMessage For="@(() => prestamo.Interes)" />
                </div>

                <div class="mb-3">
                    <label for="cuotas" class="form-label"<strong>Cuotas:</strong></label>
                    <InputNumber id="cuotas" class="form-control" @bind-Value="prestamo.Cuotas" />
                    <ValidationMessage For="@(() => prestamo.Cuotas)" />
                </div>

                <div class="mb-3">
                    <label for="formaPago" class="form-label"<strong>Forma de Pago:</strong></label>
                    <select id="formaPago" class="form-control" @bind="prestamo.FormaPago">
                        <option value="">Selecciona una opción</option>
                        <option value="Semanal">Semanal</option>
                        <option value="Quincenal">Quincenal</option>
                    </select>
                    <ValidationMessage For="@(() => prestamo.FormaPago)" />
                </div>

                <div class="mb-3">
                    <label for="fecha" class="form-label"<strong>Fecha Pago:</strong></label>
                    <InputDate id="fecha" class="form-control" @bind-Value="prestamo.FechaInicio" readonly />
                    <ValidationMessage For="@(() => prestamo.FechaInicio)" />
                </div>

                @* Campos calculados *@
                <div class="mb-3">
                    <label for="montoCuota" class="form-label"<strong>Monto por Cuota:</strong></label>
                    <InputNumber id="montoCuota" class="form-control" @bind-Value="prestamo.MontoCuota" disabled />
                </div>
                <div class="mb-3">
                    <label for="totalInteres" class="form-label"<strong>Total Inter&eacute;s:</strong></label>
                    <InputNumber id="totalInteres" class="form-control" @bind-Value="prestamo.TotalInteres" disabled />
                </div>
                <div class="mb-3">
                    <label for="montoTotalPagar" class="form-label"<strong>Monto Total a Pagar:</strong></label>
                    <InputNumber id="montoTotalPagar" class="form-control" @bind-Value="prestamo.MontoTotalPagar" disabled />
                </div>

                <button type="button" class="btn btn-outline-success" @onclick="CalcularMontos">
                    <span class="bi bi-calculator"></span> Generar Pr&eacute;stamo
                </button>
            </div>

            @* Botones de acciones *@
            <div class="card-footer text-center" style="background-color: #f1f1f1;">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">
                    <span class="bi bi-plus-circle"></span> Nuevo
                </button>
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-check-circle-fill"></span> Guardar
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="Retroceder">
                    <span class="bi bi-arrow-bar-left"></span> Retroceder
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int prestamoId { get; set; }
    private Clientes cliente;
    public Prestamos prestamo = new Prestamos();

    protected override async Task OnInitializedAsync()
    {
        prestamo = await prestamoService.Buscar(prestamoId);

        if (prestamo.ClienteId != 0) // Si hay un cliente asociado
        {
            cliente = await clienteService.Buscar(prestamo.ClienteId);
        }
    }

    private async Task RedirigirABusquedaCliente()
    {
        navigationManager.NavigateTo("/Clientes/SeleccionarCliente");
    }

    public async Task Nuevo()
    {
        prestamo = new Prestamos();
        cliente = null;
    }

    private async Task Retroceder()
    {
        navigationManager.NavigateTo("/Prestamo/Index");
    }

    private async Task Guardar()
    {
        if (cliente != null)
        {

            toastService.Notify(new(ToastType.Success,
            iconName: IconName.None,
            title: "Guardado Exitoso",
            helpText: "",
            message: "El préstamo se ha modificado correctamente."));
            CalcularMontos(); // Calculamos los montos antes de guardar
            await prestamoService.Guardar(prestamo); // Método para actualizar el préstamo
            Retroceder();
        }
    }

    private async Task CalcularMontos()
    {
        // Calcular el total de interés y monto total a pagar
        prestamo.TotalInteres = prestamo.MontoPrestado * prestamo.Interes / 100;
        prestamo.MontoTotalPagar = prestamo.MontoPrestado + prestamo.TotalInteres;

        // Calcular el monto de cuota solo si las cuotas están definidas
        if (prestamo.Cuotas > 0)
        {
            prestamo.MontoCuota = prestamo.MontoTotalPagar / prestamo.Cuotas;

            // Calcular la fecha de inicio en función de la forma de pago y cuotas
            if (prestamo.Fecha.HasValue) // Verifica si la fecha tiene un valor
            {
                DateTime fechaCreacion = prestamo.Fecha.Value; // Obtener el valor de DateTime

                // Calcular la fecha de inicio según la forma de pago
                if (prestamo.FormaPago == "Semanal")
                    prestamo.FechaInicio = fechaCreacion.AddDays(7); // Primer pago una semana después
                else if (prestamo.FormaPago == "Quincenal")
                    prestamo.FechaInicio = fechaCreacion.AddDays(15); // Primer pago 15 días después
                                                                      // Puedes agregar más condiciones para otras formas de pago si es necesario
            }
        }
        else
        {
            // Cuando Cuotas es 0 o indefinidas, calcular la fecha de inicio según la forma de pago
            if (prestamo.Fecha.HasValue) // Verifica si la fecha tiene un valor
            {
                DateTime fechaCreacion = prestamo.Fecha.Value; // Obtener el valor de DateTime

                // Calcular la fecha de inicio según la forma de pago
                if (prestamo.FormaPago == "Semanal")
                    prestamo.FechaInicio = fechaCreacion.AddDays(7); // Primer pago una semana después
                else if (prestamo.FormaPago == "Quincenal")
                    prestamo.FechaInicio = fechaCreacion.AddDays(15); // Primer pago 15 días después
                                                                      // Puedes agregar más condiciones para otras formas de pago si es necesario
            }
            else
            {
                // Manejo en caso de que Fecha no tenga valor (podrías lanzar una excepción o asignar un valor por defecto)
                throw new InvalidOperationException("La fecha de creación no puede ser nula.");
            }

            prestamo.MontoCuota = 0; // O usa null si el tipo lo permite
        }
    }
}