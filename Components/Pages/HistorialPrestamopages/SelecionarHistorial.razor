@page "/Cliente/Seleccionar"
@inject ClienteService clienteService
@inject NavigationManager navigationManager

<PageTitle>Seleccionar Cliente</PageTitle>

<div class="container-fluid vh-100 d-flex flex-column justify-content-center">
    <div class="card shadow-lg w-100 h-100">
        <div class="card-header d-flex justify-content-between align-items-center  text-black">
            <h3 class="card-title text-center w-100">Historial pr&eacute;stamo</h3>
        </div>

        <div class="card-body overflow-auto">
            <p class="text-center text-muted">Selecciona un cliente para ver su historial de préstamos.</p>
            <div class="row mb-4 align-items-end">
                <div class="col-md-4">
                    <label for="Filtro" class="form-label">Filtrar por:</label>
                    <select @bind="filtro" class="form-select">
                        <option value="0">Seleccione una opción</option>
                        <option value="Cedula">Cédula</option>
                        <option value="Nombres">Nombres</option>
                        <option value="Apellidos">Apellidos</option>
                    </select>
                </div>

                <div class="col-md-5">
                    <label for="ValorFiltro" class="form-label">Buscar Cliente:</label>
                    <div class="input-group">
                        <input @bind="valorFiltro" class="form-control" placeholder="Ingrese valor a buscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button">
                            <span class="bi bi-search me-2"></span> Buscar
                        </button>
                    </div>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-hover table-striped text-center">
                    <thead class="table-light">
                        <tr>
                            <th>Cliente ID</th>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>Cédula</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (clientes?.Any() == true)
                        {
                            @foreach (var cliente in clientes)
                            {
                                <tr>
                                    <td>@cliente.ClienteId</td>
                                    <td>@cliente.Nombres</td>
                                    <td>@cliente.Apellidos</td>
                                    <td>@cliente.Cedula</td>
                                    <td>
                                        <button class="btn btn-outline-success btn-sm rounded-pill" @onclick="() => NavegarAClienteHistorial(cliente.ClienteId)">
                                            <span class="bi bi-eye me-2"></span> Ver Historial
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5" class="text-danger text-center">No se encontraron clientes con préstamos registrados.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-between">
            <p class="mb-0">Total de clientes: @clientes?.Count</p>
        </div>
    </div>
</div>

@code {
    private List<Clientes> clientes;
    private string filtro = "0";
    private string valorFiltro = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarClientesConPrestamos();
    }

    private async Task CargarClientesConPrestamos()
    {
        clientes = await clienteService.ObtenerClientesConPrestamos();
    }

    private async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(valorFiltro))
        {
            await CargarClientesConPrestamos();
        }
        else if (filtro == "Cedula")
        {
            clientes = await clienteService.Listar(c => c.Cedula.Contains(valorFiltro) && c.Prestamos.Any());
        }
        else if (filtro == "Nombres")
        {
            clientes = await clienteService.Listar(c => c.Nombres.Contains(valorFiltro) && c.Prestamos.Any());
        }
        else if (filtro == "Apellidos")
        {
            clientes = await clienteService.Listar(c => c.Apellidos.Contains(valorFiltro) && c.Prestamos.Any());
        }
    }

    private void NavegarAClienteHistorial(int clienteId)
    {
        navigationManager.NavigateTo($"/Cliente/Historial/{clienteId}");
    }
}