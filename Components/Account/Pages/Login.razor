@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Prestamax_SRL.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<div style="background: linear-gradient(to right, #1A2E5B, #0C3E9F); width: 100%; height: 100vh; display: flex; justify-content: center; align-items: center;">
    <div style="background-color: #1A2E5B; width: 90%; max-width: 400px; padding: 40px; border-radius: 10px; box-shadow: 0px 10px 30px rgba(0,0,0,0.2); text-align: center;">
        <h2 style="color: white; margin-bottom: 30px; font-weight: bold;">Prestamax SRL</h2>
        <img src="/Money.png" alt="Icono Login" style="width: 100px; height: 100px; margin-bottom: 20px;" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div style="margin-bottom: 20px;">
                <label for="email" style="color: white; font-size: 14px; font-weight: bold; display: block; margin-bottom: 5px;">Email</label>
                <InputText id="email" @bind-Value="Input.Email" class="form-control" style="width: 100%; padding: 10px; font-size: 14px; border-radius: 5px; border: 1px solid #ccc; box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);" placeholder="username@gmail.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div style="margin-bottom: 30px;">
                <label for="password" style="color: white; font-size: 14px; font-weight: bold; display: block; margin-bottom: 5px;">Password</label>
                <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" style="width: 100%; padding: 10px; font-size: 14px; border-radius: 5px; border: 1px solid #ccc; box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);" placeholder="Password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <button type="submit" style="background-color: #0E4B9A; color: white; padding: 12px; font-size: 16px; border-radius: 24px; cursor: pointer; width: 100%; border: none; transition: background-color 0.3s, transform 0.2s;">
                Entrar
            </button>
            <div style="margin-top: 20px;">
                <p style="color: white; font-size: 14px;">
                    <a href="Account/ForgotPassword" style="color: white; text-decoration: none;">Forgot your password?</a>
                </p>
                <p style="color: white; font-size: 14px;">
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" style="color: white; text-decoration: none;">Register as a new user</a>
                </p>
                <p style="color: white; font-size: 14px;">
                    <a href="Account/ResendEmailConfirmation" style="color: white; text-decoration: none;">Resend email confirmation</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
